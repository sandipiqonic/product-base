/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/js/iqonic-script/utility.js":
/*!********************************************!*\
  !*** ./public/js/iqonic-script/utility.js ***!
  \********************************************/
/***/ (() => {

eval("function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/*\n* Version: 4.1.0\n* Template: Hope-Ui - Responsive Bootstrap 5 Admin Dashboard Template\n* Author: iqonic.design\n* Author URL: https://iqonic.design/\n* Design and Developed by: iqonic.design\n* Description: This file contains the script for initialize & listener Template.\n*/\n\n(function () {\n  this.IQUtils = function (params) {};\n\n  // save session storage value\n  this.IQUtils.saveSessionStorage = function (key, value) {\n    window.sessionStorage.setItem(key, value);\n  };\n\n  // get session storage value\n  this.IQUtils.getSessionStorage = function (key) {\n    return window.sessionStorage.getItem(key);\n  };\n\n  // remove session storage value\n  this.IQUtils.removeSessionStorage = function (key) {\n    window.sessionStorage.removeItem(key);\n  };\n\n  // save local storage value\n  this.IQUtils.saveLocalStorage = function (key, value) {\n    window.localStorage.setItem(key, value);\n  };\n\n  // get local storage value\n  this.IQUtils.getLocalStorage = function (key) {\n    return window.localStorage.getItem(key);\n  };\n\n  // remove local storage value\n  this.IQUtils.removeLocalStorage = function (key) {\n    window.localStorage.removeItem(key);\n  };\n\n  // get cookie value\n  this.IQUtils.getCookie = function (cname) {\n    var name = cname + \"=\";\n    var ca = document.cookie.split(';');\n    for (var i = 0; i < ca.length; i++) {\n      var c = ca[i];\n      while (c.charAt(0) == ' ') {\n        c = c.substring(1);\n      }\n      if (c.indexOf(name) == 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n    return \"\";\n  };\n\n  // set cookie value\n  this.IQUtils.setCookie = function (cname, cvalue, exdays) {\n    var d = new Date();\n    d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);\n    var expires = \"expires=\" + d.toUTCString();\n    document.cookie = cname + \"=\" + cvalue + \"; \" + expires;\n  };\n\n  // remove cookie value\n  this.IQUtils.removeCookie = function (cname) {\n    document.cookie = cname + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n  };\n\n  // check storage key exist function\n  this.IQUtils.checkStorageKey = function (key) {\n    if (window.localStorage.getItem(key) === null) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  // check session storage key exist function\n  this.IQUtils.checkSessionStorageKey = function (key) {\n    if (window.sessionStorage.getItem(key) === null) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  // check cookie key exist function\n  this.IQUtils.checkCookieKey = function (key) {\n    if (this.getCookie(key) === \"\") {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  // check value exist function\n  this.IQUtils.checkValue = function (value) {\n    if (value === null || value === undefined || value === \"\") {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  // check all storage from key exist or not\n  this.IQUtils.checkAllStorageKey = function (key) {\n    if (this.checkStorageKey(key) || this.checkSessionStorageKey(key) || this.checkCookieKey(key)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  // check storage array by paramerts exist function\n  this.IQUtils.checkStorageArray = function (key, storages) {\n    var result = false;\n    var obj = {};\n    for (var i = 0; i < storages.length; i++) {\n      switch (storages[i]) {\n        case 'localStorage':\n          if (this.checkStorageKey(key)) {\n            if (window.localStorage.getItem(key) !== 'none') {\n              result = true;\n              obj.storage = 'localStorage';\n            }\n          }\n          break;\n        case 'sessionStorage':\n          if (this.checkSessionStorageKey(key)) {\n            if (window.sessionStorage.getItem(key) !== 'none') {\n              result = true;\n              obj.storage = 'sessionStorage';\n            }\n          }\n          break;\n        case 'cookie':\n          if (this.checkCookieKey(key)) {\n            result = true;\n            obj.storage = 'cookieStorage';\n            obj.cookie = false;\n          }\n          break;\n        case 'none':\n          if (window.sessionStorage.getItem(key) == 'none' && window.localStorage.getItem(key) == 'none') {\n            result = true;\n            obj.storage = 'none';\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    obj.result = result;\n    return obj;\n  };\n\n  // get url parameter value\n  this.IQUtils.getUrlParameter = function (name) {\n    name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n    var regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\n    var results = regex.exec(location.search);\n    return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n  };\n\n  // get query string value\n  this.IQUtils.getQueryString = function (name) {\n    name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n    var regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\n    var results = regex.exec(location.search);\n    return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n  };\n\n  // get element by selector\n  this.IQUtils.getElem = function (selector) {\n    var elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n    return elem.querySelector(selector);\n  };\n  this.IQUtils.getElems = function (selector) {\n    var elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n    return elem.querySelectorAll(selector);\n  };\n  this.IQUtils.setContent = function (selector, content) {\n    var _newElem = selector;\n    if (_.isString(_newElem)) {\n      _newElem = IQUtils.getElems(selector);\n      ;\n    }\n    if (_typeof(_newElem.length) !== ( true ? \"undefined\" : 0)) {\n      _.forEach(_newElem, function (elem) {\n        var leftJoin = elem.getAttribute('data-leftJoin') !== null ? elem.getAttribute('data-leftJoin') : '';\n        var rightJoin = elem.getAttribute('data-rightJoin') !== null ? elem.getAttribute('data-rightJoin') : '';\n        elem.innerHTML = leftJoin + content + rightJoin;\n      });\n    }\n  };\n\n  // class add function\n  this.IQUtils.addClass = function (elem) {\n    for (var _len = arguments.length, className = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      className[_key - 1] = arguments[_key];\n    }\n    var _newElem = elem;\n    if (_.isString(_newElem)) {\n      _newElem = IQUtils.getElems(elem);\n      ;\n    }\n    if (_newElem.length !== undefined) {\n      _.forEach(_newElem, function (elem) {\n        _.forEach(className, function (newClassName) {\n          elem.classList.add(newClassName);\n        });\n      });\n    } else {\n      _.forEach(className, function (newClassName) {\n        _newElem.classList.add(newClassName);\n      });\n    }\n  };\n\n  // class remove function\n  this.IQUtils.removeClass = function (elem) {\n    for (var _len2 = arguments.length, className = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      className[_key2 - 1] = arguments[_key2];\n    }\n    var _newElem = elem;\n    if (_.isString(_newElem)) {\n      _newElem = IQUtils.getElems(elem);\n      ;\n    }\n    if (_newElem.length !== undefined) {\n      _.forEach(_newElem, function (elem) {\n        _.forEach(className, function (className) {\n          elem.classList.remove(className);\n        });\n      });\n    } else {\n      _.forEach(className, function (className) {\n        _newElem.classList.remove(className);\n      });\n    }\n  };\n\n  // class toggle function\n  this.IQUtils.toggleClass = function (elem, className) {\n    elem.classList.toggle(className);\n  };\n\n  // class has function\n  this.IQUtils.hasClass = function (elem, className) {\n    return elem.classList.contains(className);\n  };\n\n  // get attribute value\n  this.IQUtils.getAttr = function (elem, attr) {\n    return elem.getAttribute(attr);\n  };\n\n  // set attribute value\n  this.IQUtils.setAttr = function (elems, object) {\n    var _newElem = elems;\n    if (_.isString(_newElem)) {\n      _newElem = IQUtils.getElems(elems);\n      ;\n    }\n    _.forEach(_newElem, function (elem) {\n      elem.setAttribute(object.prop, object.value);\n    });\n  };\n\n  // remove attribute value\n  this.IQUtils.removeAttr = function (elem, attr) {\n    elem.removeAttribute(attr);\n  };\n\n  // update style value\n  this.IQUtils.setStyle = function (elems, object) {\n    for (var key in object) {\n      var _newElem = elems;\n      if (_.isString(_newElem)) {\n        _newElem = IQUtils.getElems(elems);\n        ;\n      }\n      _.forEach(_newElem, function (elem) {\n        elem.style[key] = object[key];\n      });\n    }\n  };\n\n  // get element position\n  this.IQUtils.getPosition = function (elem) {\n    var xPosition = 0;\n    var yPosition = 0;\n    while (elem) {\n      xPosition += elem.offsetLeft - elem.scrollLeft + elem.clientLeft;\n      yPosition += elem.offsetTop - elem.scrollTop + elem.clientTop;\n      elem = elem.offsetParent;\n    }\n    return {\n      x: xPosition,\n      y: yPosition\n    };\n  };\n\n  // get element width\n  this.IQUtils.getWidth = function (elem) {\n    return elem.offsetWidth;\n  };\n\n  // get element height\n  this.IQUtils.getHeight = function (elem) {\n    return elem.offsetHeight;\n  };\n\n  // create event\n  this.IQUtils.createEvent = function (eventName, eventData) {\n    return new Event(eventName, eventData);\n  };\n\n  // deep merge function\n  this.IQUtils.mergeDeep = function (target) {\n    var _IQUtils;\n    for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      sources[_key3 - 1] = arguments[_key3];\n    }\n    if (!sources.length) return target;\n    var source = sources.shift();\n    if (_.isObject(target) && _.isObject(source)) {\n      for (var key in source) {\n        if (_.isObject(source[key])) {\n          if (!target[key]) Object.assign(target, _defineProperty({}, key, {}));\n          IQUtils.mergeDeep(target[key], source[key]);\n        } else {\n          Object.assign(target, _defineProperty({}, key, source[key]));\n        }\n      }\n    }\n    return (_IQUtils = IQUtils).mergeDeep.apply(_IQUtils, [target].concat(sources));\n  };\n\n  // get style root variables function\n  this.IQUtils.getRootVars = function (property) {\n    var elem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.body;\n    var _newElem = elem;\n    if (_.isString(_newElem)) {\n      _newElem = IQUtils.getElems(elems);\n      ;\n    }\n    return getComputedStyle(elem).getPropertyValue(property).trim() || null;\n  };\n\n  // add or update css root variables function\n  this.IQUtils.setRootVariables = function (variables) {\n    var _root = document.documentElement;\n    var _variables = variables;\n    _.forEach(_variables, function (value, key) {\n      _root.style.setProperty(key, value);\n    });\n  };\n\n  // remove css root variables function\n  this.IQUtils.removeRootVariables = function (variables) {\n    var _root = document.documentElement;\n    var _variables = variables;\n    _.forEach(_variables, function (value, key) {\n      _root.style.removeProperty(key);\n    });\n  };\n\n  // color mix function\n  this.IQUtils.colorMix = function (color_1, color_2, weight) {\n    function d2h(d) {\n      return d.toString(16);\n    } // convert a decimal value to hex\n    function h2d(h) {\n      return parseInt(h, 16);\n    } // convert a hex value to decimal\n    weight = typeof weight !== 'undefined' ? weight : 50; // set the weight to 50%, if that argument is omitted\n    var color = \"#\";\n    for (var i = 0; i <= 5; i += 2) {\n      // loop through each of the 3 hex pairs—red, green, and blue\n      var v1 = h2d(color_1.substr(i, 2)); // extract the current pairs\n      var v2 = h2d(color_2.substr(i, 2));\n      // combine the current pairs from each source color, according to the specified weight\n      var val = d2h(Math.floor(v2 + (v1 - v2) * (weight / 100.0)));\n      while (val.length < 2) {\n        val = '0' + val;\n      } // prepend a '0' if val results in a single digit\n\n      color += val; // concatenate val to our new color string\n    }\n    return color; // PROFIT!\n  };\n\n  // tint color function\n  this.IQUtils.tintColor = function (color, weight) {\n    weight = typeof weight !== 'undefined' ? weight : 50; // set the weight to 50%, if that argument is omitted\n    var color = color;\n    var color_1 = color.substr(1); // strip the '#' character from the beginning\n    var color_2 = 'FFFFFF';\n    return IQUtils.colorMix(color_2, color_1, weight);\n  };\n\n  // shade color function\n  this.IQUtils.shadeColor = function (color, weight) {\n    weight = typeof weight !== 'undefined' ? weight : 50; // set the weight to 50%, if that argument is omitted\n    var color = color;\n    var color_1 = color.substr(1); // strip the '#' character from the beginning\n    var color_2 = '000000';\n    return IQUtils.colorMix(color_2, color_1, weight);\n  };\n\n  // color hex to rgb function\n  this.IQUtils.hexToRgb = function (hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return \"\".concat(parseInt(result[1], 16), \", \").concat(parseInt(result[2], 16), \", \").concat(parseInt(result[3], 16));\n  };\n\n  // get color shade & tint Functions\n\n  this.IQUtils.getColorShadeTint = function (color, value) {\n    console.log(color, value);\n    var colors = {};\n    var style = document.createElement('style');\n    style.setAttribute('class', 'custom-color');\n    style.innerHTML = \"\\n            [data-bs-theme-color=\\\"custom\\\"] {\\n                \".concat(color, \": \").concat(value, \";\\n                \").concat(color, \"-rgb: \").concat(IQUtils.hexToRgb(value), \";\\n                \").concat(color, \"-bg-subtle: \").concat(IQUtils.tintColor(value, 80), \";\\n                \").concat(color, \"-border-subtle: var(\").concat(color, \"-bg-subtle);\\n                --bs-link-color-rgb: var(\").concat(color, \"-rgb);\\n                \").concat(color, \"-hover-bg: \").concat(IQUtils.shadeColor(value, 20), \";\\n                \").concat(color, \"-hover-border: \").concat(IQUtils.shadeColor(value, 30), \";\\n                \").concat(color, \"-active-bg: \").concat(IQUtils.shadeColor(value, 20), \";\\n                \").concat(color, \"-active-border: \").concat(IQUtils.shadeColor(value, 30), \";\\n            }\\n            [data-bs-theme-color=\\\"custom\\\"][data-bs-theme=\\\"dark\\\"] {\\n                \").concat(color, \"-text-emphasis:  \").concat(IQUtils.tintColor(value, 40), \";\\n                \").concat(color, \"-bg-subtle:  \").concat(IQUtils.shadeColor(value, 80), \";\\n              }\\n        \");\n    document.head.appendChild(style);\n    return colors;\n  };\n  // setFontFamily function\n  this.IQUtils.setFontFamily = function (fontFamily, type) {\n    // add font into head\n    var head = document.querySelector('head');\n    var link = document.createElement('link');\n    link.setAttribute('rel', 'stylesheet');\n    link.setAttribute(\"data-font-\".concat(type), 'google');\n    link.setAttribute('href', \"https://fonts.googleapis.com/css?family=\".concat(fontFamily, \":300;400;500;700&display=swap\"));\n    head.appendChild(link);\n    // change font-family by style root variables\n    var prefix = getComputedStyle(document.body).getPropertyValue('--prefix') || 'bs-';\n    if (prefix) {\n      prefix = prefix.trim();\n    }\n    if (type !== null) {\n      document.documentElement.style.setProperty(\"--\".concat(prefix).concat(type, \"-font-family\"), fontFamily);\n    }\n  };\n  this.IQUtils.debounce = function (func, wait, immediate) {\n    var timeout;\n    return function () {\n      var context = this,\n        args = arguments;\n      var later = function later() {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      var callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  };\n  this.IQUtils.getVariableColor = function () {\n    var prefix = getComputedStyle(document.body).getPropertyValue('--prefix') || 'bs-';\n    if (prefix) {\n      prefix = prefix.trim();\n    }\n    var color1 = getComputedStyle(document.body).getPropertyValue(\"--\".concat(prefix, \"primary\"));\n    var color2 = getComputedStyle(document.body).getPropertyValue(\"--\".concat(prefix, \"info\"));\n    var color3 = getComputedStyle(document.body).getPropertyValue(\"--\".concat(prefix, \"primary-tint-20\"));\n    var color4 = getComputedStyle(document.body).getPropertyValue(\"--\".concat(prefix, \"warning\"));\n    var color5 = getComputedStyle(document.body).getPropertyValue(\"--\".concat(prefix, \"success\"));\n    var color6 = getComputedStyle(document.body).getPropertyValue(\"--\".concat(prefix, \"danger\"));\n    return {\n      primary: color1.trim(),\n      info: color2.trim(),\n      warning: color4.trim(),\n      primary_light: color3.trim(),\n      success: color5.trim(),\n      danger: color6.trim()\n    };\n  };\n  return this.IQUtils;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/iqonic-script/utility.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./public/js/iqonic-script/utility.js"]();
/******/ 	
/******/ })()
;