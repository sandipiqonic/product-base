/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./public/js/iqonic-script/setting.js":
/*!********************************************!*\
  !*** ./public/js/iqonic-script/setting.js ***!
  \********************************************/
/***/ (() => {

eval("function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/*-----------------------------\n * Functions\n * - init\n * - reInit\n * - destroy\n * - storageGet\n * - storageSet\n * - storageRemove\n * - UpdateOption\n * - setSettingOption\n * - UpdateOptionFromStorage\n * - CustomEvent for updateOption\n * - CustomEvent for updateOptionFromStorage\n * - setDefault option Soon\n * - addListeners\n   * - radioListener\n   * - checkboxListener\n   * - attribuiteListener\n   * - styleListener\n * - removeListeners\n    * - radioListener\n    * - checkboxListener\n    * - attribuiteListener\n    * - styleListener\n * - addClass\n * - removeClass\n * - toggleClass\n * - observeStorage:  https://developer.mozilla.org/en-US/docs/Web/API/Window/storage_event\n-----------------------------*/\n\n/*************************\n * Lodash functions use\n * https://lodash.com/docs/4.17.15#functions\n *  function list:\n    - _.keys\n    - _.has\n    - _.findKey\n    - _.find\n    - _.forEach\n    - _.isObject\n    - _.isArray\n    - _.isString\n * ***********************/\n\n/****** Incomplete Points\n * Color Customizer with color pallet & Custom Color\n * Font Family by root variables\n * FOOTER FIXED\n - position: STICKY;\n - bottom: 0;\n * ***/\n(function (window) {\n  var _this3 = this;\n  // Listners for Customizer\n\n  var selectors = {\n    radio: document.querySelectorAll('[data-setting=\"radio\"]'),\n    checkbox: document.querySelectorAll('[data-setting=\"checkbox\"]'),\n    attribute: document.querySelectorAll('[data-setting=\"attribute\"]'),\n    style: document.querySelectorAll('[data-setting=\"style\"]'),\n    input: document.querySelectorAll('[data-setting=\"input\"]'),\n    select: document.querySelectorAll('[data-setting=\"select\"]'),\n    color: document.querySelectorAll('[data-setting=\"color\"]')\n  };\n\n  /**************************************************************************\n   * Default Object for setting Start\n   * **********************************************************************/\n\n  var defaults = defaultSetting();\n  function defaultSetting() {\n    return {\n      saveLocal: \"\",\n      // sessionStorage, localStorage, null\n      storeKey: \"\",\n      setting: defaultSettingOption(),\n      beforeInit: function beforeInit(cb) {\n        return cb;\n      },\n      afterInit: function afterInit(cb) {\n        return cb;\n      }\n    };\n  }\n  function defaultSettingOption() {\n    return {\n      app_name: {\n        target: '[data-setting=\"app_name\"]',\n        type: \"text\",\n        value: \"Hope UI\"\n      },\n      theme_scheme_direction: {\n        target: \"html\",\n        choices: [\"ltr\", \"rtl\"],\n        value: \"ltr\"\n      },\n      theme_scheme: {\n        target: \"html\",\n        choices: [\"light\", \"dark\", \"auto\"],\n        value: \"light\"\n      },\n      theme_style_appearance: {\n        target: \"body\",\n        choices: [\"theme-default\", \"theme-flat\", \"theme-bordered\", \"theme-sharp\"],\n        value: [\"theme-default\"]\n      },\n      theme_color: {\n        target: \"html\",\n        choices: [\"default\", \"color-1\", \"color-2\", \"color-3\", \"color-4\", \"color-5\"],\n        type: \"variable\",\n        colors: {},\n        value: \"default\"\n      },\n      theme_transition: {\n        target: \"body\",\n        choices: [\"theme-without-animation\", \"theme-with-animation\"],\n        value: \"theme-with-animation\"\n      },\n      theme_font_size: {\n        target: \"html\",\n        choices: [\"theme-fs-sm\", \"theme-fs-md\", \"theme-fs-lg\"],\n        value: \"theme-fs-md\"\n      },\n      page_layout: {\n        target: \"#page_layout\",\n        choices: [\"container\", \"container-fluid\"],\n        value: \"container-fluid\"\n      },\n      header_navbar_show: {\n        target: '.iq-navbar',\n        choices: ['iq-navbar-none'],\n        value: []\n      },\n      header_navbar: {\n        target: \".iq-navbar\",\n        choices: [\"default\", \"fixed\", \"navs-sticky\", \"nav-glass\", \"navs-transparent\", \"boxed\", \"hidden\"],\n        value: \"default\"\n      },\n      header_banner: {\n        target: \".iq-banner\",\n        choices: [\"default\", \"navs-bg-color\", \"hide\"],\n        value: \"default\"\n      },\n      card_color: {\n        target: \"body\",\n        choices: [\"card-default\", \"card-glass\", \"card-transparent\"],\n        value: \"card-default\"\n      },\n      sidebar_show: {\n        target: '[data-toggle=\"main-sidebar\"]',\n        choices: ['sidebar-none'],\n        value: []\n      },\n      sidebar_color: {\n        target: '[data-toggle=\"main-sidebar\"]',\n        choices: [\"sidebar-white\", \"sidebar-dark\", \"sidebar-color\", \"sidebar-transparent\", \"sidebar-glass\"],\n        value: \"sidebar-white\"\n      },\n      sidebar_type: {\n        target: '[data-toggle=\"main-sidebar\"]',\n        choices: [\"sidebar-hover\", \"sidebar-mini\", \"sidebar-boxed\", \"sidebar-soft\"],\n        value: []\n      },\n      sidebar_menu_style: {\n        target: '[data-toggle=\"main-sidebar\"]',\n        choices: [\"sidebar-default navs-rounded\", \"sidebar-default navs-rounded-all\", \"sidebar-default navs-pill\", \"sidebar-default navs-pill-all\", \"left-bordered\", \"sidebar-default navs-full-width\"],\n        value: \"left-bordered\"\n      },\n      footer: {\n        target: \".footer\",\n        choices: [\"sticky\", \"default\", \"glass\"],\n        value: \"default\"\n      },\n      body_font_family: {\n        target: \"body\",\n        type: \"variable\",\n        value: \"Inter\"\n      },\n      heading_font_family: {\n        target: \"heading\",\n        type: \"variable\",\n        value: \"Inter\"\n      }\n    };\n  }\n\n  /**************************************************************************\n   * Default Object for setting End\n   * **********************************************************************/\n\n  // Main function\n  this.IQSetting = function (opt) {\n    this.options = {};\n    this.arg = opt;\n    this.extend(defaults);\n    this.getStorageValue(this.options.storeKey);\n    this.updateOptionFromStorage();\n    if (_.isFunction(this.options.beforeInit)) {\n      this.options.beforeInit(this);\n    }\n    this.init();\n    if (_.isFunction(this.options.afterInit)) {\n      this.options.afterInit(this);\n    }\n    this.addListeners();\n    return this;\n  };\n\n  /**************************************************************************\n   * Initialize Functions Start\n   * **********************************************************************/\n\n  // extend object function to the IQSetting prototype\n  IQSetting.prototype.extend = function (defaults) {\n    // Create options by extending defaults with the passed in arugments\n    if (this.arg && _.isObject(this.arg)) {\n      this.options = IQUtils.mergeDeep(defaults, this.arg);\n    } else {\n      this.options = defaults;\n    }\n  };\n\n  // Function call by parameter to the IQSetting prototype\n  IQSetting.prototype.fnCall = function (key) {\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getSettingKey(key).value;\n    if (_.isString(key)) {\n      if (this.__proto__.hasOwnProperty(key) && _.isFunction(this.__proto__[key])) {\n        this.__proto__[key].call(this, value);\n      }\n    }\n  };\n\n  // Init function to the IQSetting prototype\n  IQSetting.prototype.init = function () {\n    var _this = this;\n    var keys = _.keys(this.options.setting);\n    _.forEach(keys, function (key) {\n      _this.fnCall(key);\n    });\n    this.saveOption();\n  };\n\n  // reInit function to the IQSetting prototype\n  IQSetting.prototype.reInit = function () {\n    this.destroy();\n    this.extend(defaultSetting());\n    this.saveLocal(this.options.saveLocal);\n    this.init();\n    this.afterUpdate(\"reinit\", this.options);\n    this.resetFontFamily();\n  };\n\n  // After Update function to the IQSetting Prototype\n  IQSetting.prototype.afterUpdate = function (key, value) {\n    var currentValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    var event = new CustomEvent(key, {\n      detail: {\n        value: value,\n        name: key,\n        currentValue: currentValue\n      }\n    });\n    document.dispatchEvent(event);\n    this.saveOption();\n  };\n\n  // Destroy function to the IQSetting prototype\n  IQSetting.prototype.destroy = function () {\n    this.removeListeners();\n  };\n\n  // addListeners function to the IQSetting prototype\n  IQSetting.prototype.addListeners = function (elems, key) {\n    this.addRadioListener();\n    this.addCheckboxListener();\n    this.addAttributeListener();\n    this.addStyleListener();\n    this.addInputListener();\n    this.addSelectListener();\n    this.addColorListner();\n  };\n\n  // removeListeners function to the IQSetting prototype\n  IQSetting.prototype.removeListeners = function (elems, key) {\n    this.removeRadioListeners();\n    this.removeCheckboxListeners();\n    this.removeAttributeListeners();\n    this.removeStyleListeners();\n    this.removeInputListeners();\n    // this.removeSelectListeners();\n  };\n\n  /**************************************************************************\n   * Initialize Functions End\n   * **********************************************************************/\n\n  /**************************************************************************\n   * Get Value Functions Start\n   * **********************************************************************/\n\n  // Update option key values to the IQSetting\n  IQSetting.prototype.setMainOption = function (key, value) {\n    this.options[key] = value;\n  };\n\n  // get setting options function to the IQSetting prototype\n  IQSetting.prototype.getSettingOptions = function () {\n    return this.options.settings;\n  };\n\n  // get Setting key function to the IQSetting prototype\n  IQSetting.prototype.getSettingKey = function (key) {\n    return this.options.setting[key];\n  };\n\n  // Update option setting key values to the IQSetting\n  IQSetting.prototype.setSettingOption = function (key, value, manual) {\n    if (manual) {\n      this.options.setting[key].value = value;\n    }\n  };\n\n  // Update theme color custom choise object to the IQSetting\n  this.IQSetting.prototype.setSettingColorChoice = function (key, pair) {\n    this.options.setting[key].colors[pair.key] = pair.value;\n  };\n\n  // get option json function to the IQSetting prototype\n  IQSetting.prototype.getSettingJson = function () {\n    var self = this;\n    var json = {};\n    Object.keys(self.options).forEach(function (key) {\n      if (key !== \"afterInit\" && key !== \"beforeInit\") {\n        json[key] = self.options[key];\n        if (key === \"setting\") {\n          Object.keys(json[key]).forEach(function (subKey) {\n            delete json[key][subKey].target;\n            delete json[key][subKey].type;\n            delete json[key][subKey].choices;\n          });\n        }\n      }\n    });\n    this.options = IQUtils.mergeDeep(defaults, json);\n    return JSON.stringify(json, null, 4);\n  };\n\n  // Static method to get the instance of the IQSetting\n  IQSetting.getInstance = function () {\n    if (!IQSetting.instance) {\n      IQSetting.instance = new IQSetting();\n    }\n    return IQSetting.instance;\n  };\n\n  /**************************************************************************\n   * Get Value Functions End\n   * **********************************************************************/\n\n  /**************************************************************************\n   * Storage get & update Functions Start\n   * **********************************************************************/\n\n  // function for save option in localStorage or sessionStorage based on options\n  IQSetting.prototype.saveOption = function () {\n    var key = this.options.storeKey;\n    var value = this.options;\n    if (_typeof(value) !== ( true ? \"undefined\" : 0) && _typeof(key) !== ( true ? \"undefined\" : 0)) {\n      switch (this.options.saveLocal) {\n        case 'localStorage':\n          sessionStorage.removeItem(key);\n          return IQUtils.saveLocalStorage(key, JSON.stringify(value));\n          break;\n        case 'sessionStorage':\n          localStorage.removeItem(key);\n          return IQUtils.saveSessionStorage(key, JSON.stringify(value));\n          break;\n        case \"cookieStorage\":\n          return IQUtils.setCookie(key, JSON.stringify(value));\n          break;\n        default:\n          break;\n      }\n    }\n    localStorage.setItem(key, 'none');\n    sessionStorage.setItem(key, 'none');\n  };\n\n  // function for get option in localStorage or sessionStorage based on options\n  IQSetting.prototype.getOption = function (key) {\n    if (localStorage.getItem(key) === 'none' || sessionStorage.getItem(key) === 'none') return 'none';\n    if (localStorage.getItem(key) !== null && localStorage.getItem(key) !== '' || sessionStorage.getItem(key) !== null && sessionStorage.getItem(key) !== '') {\n      var value = localStorage.getItem(key);\n      if (value === null) value = sessionStorage.getItem(key);\n      if (value !== null) {\n        try {\n          return JSON.parse(value);\n        } catch (e) {\n          return value;\n        }\n      }\n    }\n  };\n\n  // function for update option from localStorage or sessionStorage based on options\n  IQSetting.prototype.updateOptionFromStorage = function () {\n    var getData = this.getOption(this.options.storeKey);\n    if (getData === 'none') {\n      return this.options.saveLocal = 'none';\n    }\n    if (getData !== undefined) {\n      this.options = getData;\n    }\n    return this.options;\n  };\n\n  // function for get storage value if exists\n  IQSetting.prototype.getStorageValue = function (key) {\n    var checkKey = IQUtils.checkStorageArray(key, [\"localStorage\", \"sessionStorage\", \"cookieStorage\", \"none\"]);\n    var defaultstorage = this.options.saveLocal;\n    if (checkKey.result) {\n      defaultstorage = checkKey.storage;\n    }\n    IQUtils.getElems(\"input[name=\\\"saveLocal\\\"]\").forEach(function (el) {\n      el.checked = false;\n      if (el.value === defaultstorage) {\n        el.checked = true;\n      }\n    });\n  };\n\n  /**************************************************************************\n   * Storage get & update Functions End\n   * **********************************************************************/\n\n  /**************************************************************************\n   * Input Update Functions Start\n   * **********************************************************************/\n\n  // Input radio input manually change function to the IQSetting prototype\n  IQSetting.prototype.__radioInputChange__ = function (key) {\n    var obj = this.getSettingKey(key);\n    IQUtils.getElems(\"input[name=\\\"\".concat(key, \"\\\"]\")).forEach(function (el) {\n      el.checked = false;\n      if (el.value === obj.value) {\n        el.checked = true;\n      }\n    });\n  };\n  // Input checkbox input manually change function to the IQSetting prototype\n  IQSetting.prototype.__checkboxInputChange__ = function (key) {\n    var obj = this.getSettingKey(key);\n    IQUtils.getElems(\"input[name=\\\"\".concat(key, \"\\\"]\")).forEach(function (el) {\n      el.checked = false;\n      if (obj.value.indexOf(el.value) !== -1) {\n        el.checked = true;\n      }\n    });\n  };\n  // Input manually change function to the IQSetting prototype\n  IQSetting.prototype.__inputChange__ = function (key, value) {\n    IQUtils.getElems(\"input[name=\\\"\".concat(key, \"\\\"]\")).forEach(function (el) {\n      el.value = value;\n    });\n  };\n  // Select input update manually change function to the IQSetting prototype\n  IQSetting.prototype.__selectInputChange__ = function (key) {\n    var obj = this.getSettingKey(key);\n    IQUtils.getElems(\"select[name=\\\"\".concat(key, \"\\\"]\")).forEach(function (el) {\n      el.value = obj.value;\n    });\n    if ((typeof $ === \"undefined\" ? \"undefined\" : _typeof($)) !== ( true ? \"undefined\" : 0)) {\n      $(\"[data-select=\\\"font\\\"][name=\\\"\".concat(key, \"\\\"]\")).val(obj.value).trigger(\"change\");\n    }\n  };\n\n  /**************************************************************************\n   * Input Update Functions End\n   * **********************************************************************/\n\n  /**************************************************************************\n   * Dom & Object Update Functions Start\n   * IQSetting.options update functions saveLocal, setting:key, value etc...\n   * **********************************************************************/\n\n  // radio update function to the IQSetting prototype\n  IQSetting.prototype.__radioUpdate__ = function (key, value, cb) {\n    var obj = this.getSettingKey(key);\n    if (value !== null) {\n      obj.value = value;\n      this.setSettingOption(key, value);\n    }\n    if (obj.target !== null) {\n      var _IQUtils2;\n      obj.choices.forEach(function (other) {\n        var _IQUtils;\n        (_IQUtils = IQUtils).removeClass.apply(_IQUtils, [obj.target].concat(_toConsumableArray(other.split(' '))));\n      });\n      (_IQUtils2 = IQUtils).addClass.apply(_IQUtils2, [obj.target].concat(_toConsumableArray(value.split(' '))));\n    }\n    this.__radioInputChange__(key);\n    if (_.isFunction(cb)) {\n      cb(key, value, obj);\n    }\n    this.afterUpdate(key, value);\n  };\n\n  // style update function to the IQSetting prototype\n  IQSetting.prototype.__styleUpdate__ = function (key) {\n    var pair = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      prop: \"\",\n      value: \"value\"\n    };\n    var cb = arguments.length > 2 ? arguments[2] : undefined;\n    var obj = this.getSettingKey(key);\n    if (pair.value !== null) {\n      obj.value = pair.value;\n      this.setSettingOption(key, pair.value);\n    }\n    if (obj.target !== null) {\n      IQUtils.setStyle(obj.target, pair);\n    }\n    this.__radioInputChange__(key);\n    if (_.isFunction(cb)) {\n      cb(key, pair.value);\n    }\n    this.afterUpdate(key, pair);\n  };\n\n  // attribute update function to the IQSetting prototype\n  IQSetting.prototype.__attributeUpdate__ = function (key) {\n    var pair = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      prop: \"color\",\n      value: \"value\"\n    };\n    var cb = arguments.length > 2 ? arguments[2] : undefined;\n    var obj = this.getSettingKey(key);\n    if (pair.value !== null) {\n      obj.value = pair.value;\n      this.setSettingOption(key, pair.value);\n    }\n    if (obj.target !== null) {\n      IQUtils.setAttr(obj.target, pair);\n    }\n    this.__radioInputChange__(key);\n    if (_.isFunction(cb)) {\n      cb(key, pair.value);\n    }\n    this.afterUpdate(key, pair);\n  };\n\n  // checkbox update function to the IQSetting Prototype\n  IQSetting.prototype.__checkboxUpdate__ = function (key, value, currentValue, cb) {\n    var obj = this.getSettingKey(key);\n    if (value !== null) {\n      obj.value = value;\n      this.setSettingOption(key, value);\n    }\n    if (obj.target !== null) {\n      obj.choices.forEach(function (other) {\n        IQUtils.removeClass(obj.target, other);\n      });\n      if (obj.value.length) {\n        obj.value.forEach(function (objValue) {\n          IQUtils.addClass(obj.target, objValue);\n        });\n      }\n    }\n    this.__checkboxInputChange__(key);\n    if (_.isFunction(cb)) {\n      cb(key, value);\n    }\n    this.afterUpdate(key, value, currentValue);\n  };\n\n  // input update function to the IQSetting Prototype\n  IQSetting.prototype.__inputUpdate__ = function (key, value, cb) {\n    var obj = this.getSettingKey(key);\n    if (value !== null) {\n      obj.value = value;\n      this.setSettingOption(key, value);\n    }\n    if (obj.target !== null) {\n      IQUtils.setContent(obj.target, value.substr(0, 10));\n    }\n    this.__inputChange__(key, value);\n    if (_.isFunction(cb)) {\n      cb(key, value);\n    }\n    this.afterUpdate(key, value);\n  };\n\n  // Update theme color & custom color to the IQSetting Prototype\n  IQSetting.prototype.__updateThemeColor__ = function (key, value) {\n    var obj = this.getSettingKey(key);\n    if (value !== null) {\n      obj.value = value;\n      this.setSettingOption(key, value);\n    }\n    if (obj.target !== null) {\n      obj.choices.forEach(function (other) {\n        IQUtils.removeClass(obj.target, other);\n      });\n      if (obj.value !== \"custom\") {\n        this.resetColor(key);\n      }\n      if (!_.isObject(obj.value)) {\n        this.__attributeUpdate__(\"theme_color\", {\n          prop: \"data-bs-theme-color\",\n          value: 'custom'\n        });\n        var prefix = IQUtils.getRootVars(\"--prefix\") || \"bs-\";\n        var newColors = {};\n        document.querySelectorAll('.custom-color').forEach(function (element) {\n          if (element) {\n            element.remove();\n          }\n        });\n        _.forEach(obj.colors, function (value, key) {\n          key = key.replace(\"{{prefix}}\", prefix);\n          newColors = _objectSpread(_objectSpread({}, newColors), IQUtils.getColorShadeTint(key, value));\n        });\n      }\n    }\n    this.__radioInputChange__(key);\n    this.afterUpdate(key, value);\n  };\n  this.IQSetting.prototype.resetColor = function (key) {\n    var _this2 = this;\n    var choices = defaults.setting.theme_color.choices.find(function (x) {\n      return x.name == \"custom\";\n    });\n    if (choices !== undefined) {\n      _.forEach(defaults.setting.theme_color.colors, function (value, index) {\n        _this2.setSettingColorChoice(key, {\n          key: index,\n          value: value\n        });\n      });\n    }\n  };\n\n  // Update font function to the IQSetting Prototype\n  IQSetting.prototype.__selectUpdate__ = function (key, value) {\n    var obj = this.getSettingKey(key);\n    if (value !== null) {\n      obj.value = value;\n      this.setSettingOption(key, value);\n    }\n    if (obj.target !== null) {\n      IQUtils.setFontFamily(value, obj.target);\n    }\n    this.__selectInputChange__(key);\n    this.afterUpdate(key, value);\n  };\n\n  // Update option function to the IQSetting Prototype\n  IQSetting.prototype.__updateOption__ = function (key, value) {\n    this.setMainOption(key, value);\n    this.saveOption();\n    this.updateOptionFromStorage();\n  };\n\n  /**************************************************************************\n   * Dom & Object Update Functions End\n   * **********************************************************************/\n\n  /**************************************************************************\n   * Add Listener Functions Start\n   * **********************************************************************/\n\n  // Add radio event listener to the IQSetting prototype\n  IQSetting.prototype.addRadioListener = function (cb) {\n    var self = this;\n    selectors.radio.forEach(function (item) {\n      item.addEventListener(\"change\", function (e) {\n        var value = e.target.value;\n        var key = e.target.getAttribute(\"name\");\n        // Update dom values based on radio button\n        if (key === \"theme_color\") {\n          self.__attributeUpdate__(\"theme_color\", {\n            prop: \"data-bs-theme-color\",\n            value: value\n          });\n        }\n        self.__proto__[key].call(self, value);\n        if (_.isFunction(cb)) {\n          cb();\n        }\n      });\n    });\n  };\n\n  // Add checkbox event listener to the IQSetting Prototype\n  IQSetting.prototype.addCheckboxListener = function (cb) {\n    var self = this;\n\n    // add event listener to all setting checkboxes\n    selectors.checkbox.forEach(function (item) {\n      item.addEventListener(\"change\", function (e) {\n        var values = [];\n        var key = e.target.getAttribute(\"name\");\n\n        // checkbox values get from domElement\n        var checkboxElements = document.querySelectorAll(\"[name=\\\"\".concat(key, \"\\\"]\"));\n        checkboxElements.forEach(function (item) {\n          if (item.checked) {\n            values.push(item.value);\n          }\n        });\n\n        // Update dom values based on checkbox\n        self.__proto__[key].call(self, values, e.target.value);\n        if (_.isFunction(cb)) {\n          cb();\n        }\n      });\n    });\n  };\n\n  // Add style event listener to the IQSetting Prototype\n  IQSetting.prototype.addStyleListener = function (cb) {\n    var self = this;\n\n    // add event listener for inline style\n    selectors.style.forEach(function (item) {\n      item.addEventListener(\"change\", function (e) {\n        var value = e.target.value;\n        var key = e.target.getAttribute(\"name\");\n        var pair = {\n          prop: e.target.getAttribute(\"data-prop\"),\n          value: value\n        };\n\n        // Update dom values based on style\n        self.__proto__[key].call(self, pair.value);\n        if (_.isFunction(cb)) {\n          cb();\n        }\n      });\n    });\n  };\n\n  // Add attribute event listener to the IQSetting Prototype\n  IQSetting.prototype.addAttributeListener = function (cb) {\n    var self = this;\n    selectors.attribute.forEach(function (item) {\n      // add event listener for attribute change\n      item.addEventListener(\"change\", function (e) {\n        var value = e.target.value;\n        var key = e.target.getAttribute(\"name\");\n        var pair = {\n          prop: e.target.getAttribute(\"data-prop\"),\n          value: value\n        };\n        // Update dom values based on attribute\n        self.__proto__[key].call(self, pair.value);\n        if (_.isFunction(cb)) {\n          cb();\n        }\n      });\n    });\n  };\n\n  // Add input event listener to the IQSetting Prototype\n  IQSetting.prototype.addInputListener = function (cb) {\n    var self = this;\n    selectors.input.forEach(function (item) {\n      // add event listener for input change\n      item.addEventListener(\"input\", function (e) {\n        var value = e.target.value || \"\";\n        var key = e.target.getAttribute(\"name\");\n        self.__proto__[key].call(self, value);\n        if (_.isFunction(cb)) {\n          cb();\n        }\n      });\n    });\n  };\n\n  // Add select event listener to the IQSetting Prototype\n  IQSetting.prototype.addSelectListener = function (cb) {\n    var self = this;\n    selectors.select.forEach(function (item) {\n      // add event listener for select change\n      if ((typeof $ === \"undefined\" ? \"undefined\" : _typeof($)) !== ( true ? \"undefined\" : 0)) {\n        $(item).on(\"select2:select\", function (e) {\n          var value = e.params.data.id;\n          var key = e.target.getAttribute(\"name\");\n          self.__proto__[key].call(self, value);\n          if (_.isFunction(cb)) {\n            cb();\n          }\n        });\n      }\n    });\n  };\n\n  // Add color event listner to the IQSetting Prototype\n  IQSetting.prototype.addColorListner = function () {\n    var self = this;\n    selectors.color.forEach(function (item) {\n      var debFun = IQUtils.debounce(function (name, value) {\n        self.setSettingColorChoice(name, value);\n        self.theme_color(\"custom\");\n      }, 200, false);\n      item.addEventListener(\"input\", function (e) {\n        var value = {\n          key: \"--{{prefix}}\".concat(e.target.dataset.extra),\n          value: e.target.value\n        };\n        debFun(e.target.name, value);\n      }, false);\n    });\n  };\n\n  /**************************************************************************\n   * Add Listener Functions End\n   * **********************************************************************/\n\n  /**************************************************************************\n   * Remove Listener Functions Start\n   * **********************************************************************/\n\n  // remove radio listeners function to the IQSetting prototype\n  IQSetting.prototype.removeRadioListeners = function () {\n    selectors.radio.forEach(function (item) {\n      item.removeEventListener(\"change\", null);\n    });\n  };\n\n  // remove checkbox listeners function to the IQSetting prototype\n  IQSetting.prototype.removeCheckboxListeners = function () {\n    selectors.checkbox.forEach(function (item) {\n      item.removeEventListener(\"change\", null);\n    });\n  };\n\n  // remove style listeners function to the IQSetting prototype\n  IQSetting.prototype.removeStyleListeners = function () {\n    selectors.style.forEach(function (item) {\n      item.removeEventListener(\"change\", null);\n    });\n  };\n\n  // remove attribute listeners function to the IQSetting prototype\n  IQSetting.prototype.removeAttributeListeners = function () {\n    selectors.attribute.forEach(function (item) {\n      item.removeEventListener(\"change\", null);\n    });\n  };\n\n  // remove input listeners function to the IQSetting prototype\n  IQSetting.prototype.removeInputListeners = function () {\n    selectors.input.forEach(function (item) {\n      item.removeEventListener(\"change\", null);\n    });\n  };\n\n  // remove select listeners function to the IQSetting prototype\n  IQSetting.prototype.removeSelectListeners = function () {\n    selectors.select.forEach(function (item) {\n      if ((typeof $ === \"undefined\" ? \"undefined\" : _typeof($)) !== ( true ? \"undefined\" : 0)) {\n        $(item).off(\"select2:select\", null);\n      }\n    });\n  };\n\n  /**************************************************************************\n   * Remove Listener Functions End\n   * **********************************************************************/\n\n  // Reset Font Family Functions Start\n  IQSetting.prototype.resetFontFamily = function () {\n    document.querySelectorAll('[data-font-body=\"google\"]').forEach(function (el) {\n      el.remove();\n    });\n    document.querySelectorAll('[data-font-heading=\"google\"]').forEach(function (el) {\n      el.remove();\n    });\n    var prefix = getComputedStyle(document.body).getPropertyValue(\"--prefix\") || \"bs-\";\n    if (prefix) {\n      prefix = prefix.trim();\n    }\n    var bodyFamily = '\"Inter\", sans-serif';\n    var headingFamily = '\"Inter\", sans-serif';\n    if ((typeof $ === \"undefined\" ? \"undefined\" : _typeof($)) !== ( true ? \"undefined\" : 0)) {\n      $(\"[data-select=\\\"font\\\"]\").select2(\"destroy\").select2();\n    }\n    document.documentElement.style.setProperty(\"--\".concat(prefix, \"body-font-family\"), bodyFamily);\n    document.documentElement.style.setProperty(\"--\".concat(prefix, \"heading-font-family\"), headingFamily);\n    this.setSettingOption(\"body_font_family\", \"Inter\", true);\n    this.setSettingOption(\"heading_font_family\", \"Inter\", true);\n    this.__selectInputChange__(\"body_font_family\", bodyFamily);\n    this.__selectInputChange__(\"heading_font_family\", headingFamily);\n  };\n\n  // 0. Set app name function to the IQSetting prototype @param {string} appName\n  IQSetting.prototype.app_name = function (value) {\n    if (_typeof(value) !== _typeof(null)) {\n      this.__inputUpdate__(\"app_name\", value);\n    }\n  };\n\n  // 1. theme_scheme function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.theme_scheme = function (value) {\n    if (_typeof(value) !== _typeof(null)) {\n      this.__attributeUpdate__(\"theme_scheme\", {\n        prop: \"data-bs-theme\",\n        value: value\n      }, function (key, val) {\n        document.querySelector(\"html\").setAttribute(\"data-bs-theme\", value);\n        if (value == \"auto\") {\n          if (matchMedia(\"(prefers-color-scheme: light)\").matches) {\n            document.querySelector(\"html\").setAttribute(\"data-bs-theme\", \"light\");\n          } else {\n            document.querySelector(\"html\").setAttribute(\"data-bs-theme\", \"dark\");\n          }\n        }\n      });\n    }\n  };\n\n  // 2. theme_scheme_direction function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.theme_scheme_direction = function (value) {\n    if (_typeof(value) !== _typeof(null)) {\n      var __this = this;\n      this.__attributeUpdate__(\"theme_scheme_direction\", {\n        prop: \"dir\",\n        value: value\n      }, function (key, val) {\n        __this.rtlChange(val == \"rtl\" ? true : false);\n        if ((typeof $ === \"undefined\" ? \"undefined\" : _typeof($)) !== ( true ? \"undefined\" : 0)) {\n          if ($(\"[data-select=\\\"font\\\"]\").data(\"select2\")) {\n            $(\"[data-select=\\\"font\\\"]\").select2(\"destroy\").select2();\n          }\n        }\n      });\n    }\n  };\n\n  // 3. theme_style_appearance function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.theme_style_appearance = function (value, currentValue) {\n    if (value !== null) {\n      this.__checkboxUpdate__(\"theme_style_appearance\", value, currentValue);\n    }\n  };\n\n  // 4. theme_color function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.theme_color = function (value) {\n    if (_typeof(value) !== _typeof(null)) {\n      if (value == 'custom') {\n        this.__updateThemeColor__(\"theme_color\");\n      } else {\n        this.__attributeUpdate__(\"theme_color\", {\n          prop: \"data-bs-theme-color\",\n          value: value\n        });\n      }\n    }\n  };\n\n  // 5. theme_transition function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.theme_transition = function (value) {\n    if (_typeof(value) !== _typeof(null)) {\n      this.__radioUpdate__(\"theme_transition\", value);\n    }\n  };\n\n  // 6. theme_font_size function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.theme_font_size = function (value) {\n    if (_typeof(value) !== _typeof(null)) {\n      this.__radioUpdate__(\"theme_font_size\", value);\n    }\n  };\n\n  // 7. page_layout function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.page_layout = function (value) {\n    if (_typeof(value) !== _typeof(null)) {\n      this.__radioUpdate__(\"page_layout\", value);\n    }\n  };\n\n  // 8. header_navbar function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.header_navbar = function (value) {\n    if (_typeof(value) !== _typeof(null)) {\n      this.__radioUpdate__(\"header_navbar\", value);\n    }\n  };\n\n  // 9. header_banner function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.header_banner = function (value) {\n    if (_typeof(value) !== _typeof(null)) {\n      this.__radioUpdate__(\"header_banner\", value);\n    }\n  };\n\n  // 10. sidebar_color function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.sidebar_color = function (value) {\n    if (_typeof(value) !== _typeof(null)) {\n      this.__radioUpdate__(\"sidebar_color\", value);\n    }\n  };\n\n  // 11. sidebar_type function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.sidebar_type = function (value, currentValue) {\n    if (value !== null) {\n      this.__checkboxUpdate__(\"sidebar_type\", value, currentValue);\n    }\n  };\n\n  // 12. sidebar_menu_style function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.sidebar_menu_style = function (value) {\n    if (_typeof(value) !== _typeof(null)) {\n      this.__radioUpdate__(\"sidebar_menu_style\", value);\n    }\n  };\n\n  // 13. footer function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.footer = function (value) {\n    if (_typeof(value) !== _typeof(null)) {\n      this.__radioUpdate__(\"footer\", value);\n    }\n  };\n\n  // 14. footer function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.body_font_family = function () {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    if (_typeof(value) != _typeof(null) && value != '' && value != 'null') {\n      this.__selectUpdate__(\"body_font_family\", value);\n    }\n  };\n\n  // 15. footer function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.heading_font_family = function () {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    if (_typeof(value) != _typeof(null) && value != '' && value != 'null') {\n      this.__selectUpdate__(\"heading_font_family\", value);\n    }\n  };\n\n  // 16. card_color function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.card_color = function (value) {\n    if (_typeof(value) !== _typeof(null)) {\n      this.__radioUpdate__(\"card_color\", value);\n    }\n  };\n\n  // 17. sidebar_show function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.sidebar_show = function (value, currentValue) {\n    if (value !== null) {\n      this.__checkboxUpdate__(\"sidebar_show\", value, currentValue);\n    }\n  };\n\n  // 17. header_navbar_show function to the IQSetting prototype @params: value (string)\n  IQSetting.prototype.header_navbar_show = function (value, currentValue) {\n    if (value !== null) {\n      this.__checkboxUpdate__(\"header_navbar_show\", value, currentValue);\n    }\n  };\n\n  // saveLocal function to the IQSetting prototype value (string)\n  IQSetting.prototype.saveLocal = function () {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    if (value !== null) {\n      this.__updateOption__(\"saveLocal\", value);\n    }\n  };\n\n  /**************************************************************************\n   * Additional Functions Start\n   * **********************************************************************/\n  // Rtl Change to Offcanvas left to right Static Function\n  IQSetting.prototype.rtlChange = function (check) {\n    IQUtils.addClass(\".offcanvas-start\", \"on-rtl\", \"start\");\n    IQUtils.addClass(\".offcanvas-end\", \"on-rtl\", \"end\");\n    if (check) {\n      IQUtils.addClass(\".on-rtl.start\", \"offcanvas-end\");\n      IQUtils.removeClass(\".on-rtl.start\", \"offcanvas-start\");\n      IQUtils.addClass(\".on-rtl.end\", \"offcanvas-start\");\n      IQUtils.removeClass(\".on-rtl.end\", \"offcanvas-end\");\n    } else {\n      IQUtils.addClass(\".on-rtl.start\", \"offcanvas-start\");\n      IQUtils.removeClass(\".on-rtl.start\", \"offcanvas-end\");\n      IQUtils.addClass(\".on-rtl.end\", \"offcanvas-end\");\n      IQUtils.removeClass(\".on-rtl.end\", \"offcanvas-start\");\n    }\n  };\n  /**************************************************************************\n   * Additional Functions End\n   * **********************************************************************/\n\n  // Export the IQSetting\n  window.IQSetting = this.IQSetting;\n\n  // reset font color\n  var resetFont = document.querySelector('[data-reset=\"body-heading-font\"]');\n  if (resetFont !== null) {\n    resetFont.addEventListener(\"click\", function (e) {\n      e.preventDefault();\n      _this3.IQSetting.setSettingOption(\"body_font_family\", \"Inter\", true);\n      _this3.IQSetting.setSettingOption(\"heading_font_family\", \"Inter\", true);\n      _this3.IQSetting.resetFontFamily();\n    });\n  }\n  return window.IQSetting;\n})(window);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/js/iqonic-script/setting.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./public/js/iqonic-script/setting.js"]();
/******/ 	
/******/ })()
;